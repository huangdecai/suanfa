
// 这是导出函数的一个示例。
TESTC_API tagOutCardResultNew* __stdcall fntestC(
BYTE cbHandCardData[], --自己手牌的数据
BYTE cbHandCardCount, --自己的手牌张数
BYTE cbTurnCardData[],--上一手出牌的数据
 BYTE cbTurnCardCount,--上一手出牌的张数
 BYTE	DiscardCard[], 牌桌上已经出过的所有牌的数据
BYTE cbDiscardCardCount, 牌桌上已经出过的所有牌的张数
BYTE  cbCardDataEx[MAX_COUNT]，0位自己让别人多少张，默认为0，1位别人让自己多少张，默认为0，其他的不用理
BYTE	cbMaxCard[MAX_COUNT]，  不用理
 BYTE cbOthreRangCardCount,别人让自己多少张，默认为0
 BYTE &cbCardCount,返回给你的牌数据张数
 BYTE cbResultCard[] 返回牌的数据
)
TESTC_API int __stdcall countScore(
BYTE cbHandCardData[], --自己手牌的数据
BYTE cbHandCardCount, --自己的手牌张数
int &cbCardScore    --返回的分数
)
#define TESTC_API __declspec(dllexport)

extern "C" TESTC_API int fntestPython2(tagInPyhonNew *pythonIn); 出牌
extern "C" TESTC_API int fntestPythonType(tagInPyhonCardType *pythonIn); 获取牌类型
extern "C" TESTC_API int PythonCountScore(tagInPyhonCardScore* pythonIn);  牌分数
MAX_COUNT=20
//出牌结果
struct tagInPyhonCardScore
{
	BYTE							cbHandCardData[MAX_COUNT];
	BYTE							cbHandCardCount;
	int							cbCardScore;
};
//出牌结果
struct tagInPyhonCardType
{
	BYTE							cbHandCardData[MAX_COUNT];
	BYTE							cbHandCardCount;
	BYTE							cbType;
};
//出牌结果
struct tagInPyhonNew
{
	BYTE							cbHandCardData[MAX_COUNT];--自己手牌的数据
	BYTE							cbHandCardCount;--自己的手牌张数
	BYTE							cbTurnCardData[MAX_COUNT];--上一手出牌的数据
	BYTE							cbTurnCardCount;--上一手出牌的张数
	BYTE							cbDiscardCard[54];牌桌上已经出过的所有牌的数据
	BYTE							cbDiscardCardCount;牌桌上已经出过的所有牌的张数
	BYTE							cbCardDataEx[MAX_COUNT]; 0位自己让别人多少张，默认为0，1位别人让自己多少张，默认为0，其他的不用理
	BYTE							cbMaxCard[MAX_COUNT];    不用理
	BYTE							cbCardCount;						返回给你的牌数据张数
	BYTE							cbResultCard[MAX_COUNT];			返回牌的数据
};
//扑克数据
const BYTE	CGameLogicNew::m_cbCardData[FULL_COUNT]=
{
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,	//方块 A - K
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,	//梅花 A - K
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,	//红桃 A - K
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,	//黑桃 A - K
	0x4E,0x4F,
};
